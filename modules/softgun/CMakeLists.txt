CMAKE_MINIMUM_REQUIRED(VERSION 3.0)

PROJECT(modules
  LANGUAGES C
  )

## Add the project files
# source files
FILE(GLOB_RECURSE files ${PROJECT_SOURCE_DIR} *.c)
ADD_LIBRARY(${PROJECT_NAME} MODULE ${files})

# generated files

# header files


## Set the required

# Automatically add the current source- and build directories to the include path.
SET(CMAKE_INCLUDE_CURRENT_DIR ON)

# Includes
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PRIVATE "${PROJECT_SOURCE_DIR}/../../src")
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PRIVATE "${PROJECT_SOURCE_DIR}/../../src/softgun")
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PRIVATE "${PROJECT_SOURCE_DIR}/")
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PRIVATE "${PROJECT_SOURCE_DIR}/controllers/at91")
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PRIVATE "${PROJECT_SOURCE_DIR}/controllers/imx21")
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PRIVATE "${PROJECT_SOURCE_DIR}/controllers/nuc970")
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PRIVATE "${PROJECT_SOURCE_DIR}/controllers/ns9750")
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PRIVATE "${PROJECT_SOURCE_DIR}/controllers/lpc2106")
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PRIVATE "${PROJECT_SOURCE_DIR}/devices/can")
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PRIVATE "${PROJECT_SOURCE_DIR}/devices/enc28j60")
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PRIVATE "${PROJECT_SOURCE_DIR}/devices/fbdd_02_02")
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PRIVATE "${PROJECT_SOURCE_DIR}/devices/i2c")
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PRIVATE "${PROJECT_SOURCE_DIR}/devices/lcd")
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PRIVATE "${PROJECT_SOURCE_DIR}/devices/netx")
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PRIVATE "${PROJECT_SOURCE_DIR}/devices/phy")
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PRIVATE "${PROJECT_SOURCE_DIR}/devices/sdcard")
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PRIVATE "${PROJECT_SOURCE_DIR}/devices/spi")

TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PRIVATE "${PROJECT_SOURCE_DIR}/printer")

# libm
TARGET_LINK_LIBRARIES(${PROJECT_NAME} PUBLIC m)

# leigun
#FIND_PACKAGE(leigun REQUIRED)
#TARGET_LINK_LIBRARIES(${PROJECT_NAME} PUBLIC leigun)

# ENABLE WARNINGS
TARGET_COMPILE_OPTIONS(
  ${PROJECT_NAME} PRIVATE
#  "$<$<C_COMPILER_ID:Clang>:-Wall;-Weverything>"
  "$<$<C_COMPILER_ID:GNU>:-pedantic;-Wall;-Wextra;-Wcast-align;-Wcast-qual;-Wdisabled-optimization;-Wformat=2;-Winit-self;-Wlogical-op;-Wmissing-declarations;-Wmissing-include-dirs;-Wredundant-decls;-Wshadow;-Wsign-conversion;-Wstrict-overflow=5;-Wswitch-default;-Wundef>"
  "$<$<C_COMPILER_ID:MSVC>:/W4>"
  )

# DISABLE FUSSY WARNINGS
TARGET_COMPILE_OPTIONS(
  ${PROJECT_NAME} PRIVATE
  "$<$<C_COMPILER_ID:Clang>:-Wno-padded;-Wno-unused-parameter;-Wno-unused-macros>"
  "$<$<C_COMPILER_ID:GNU>:-Wno-unused-parameter>"
  "$<$<C_COMPILER_ID:MSVC>:>"
  )

# set message to color
IF("Ninja" STREQUAL ${CMAKE_GENERATOR})
  TARGET_COMPILE_OPTIONS(
    ${PROJECT_NAME} PRIVATE
    "$<$<C_COMPILER_ID:Clang>:-fdiagnostics-color=always>"
    "$<$<C_COMPILER_ID:GNU>:-fdiagnostics-color=always>"
    )
ENDIF()

TARGET_COMPILE_DEFINITIONS(${PROJECT_NAME} PRIVATE -D_GNU_SOURCE -DTARGET_BIG_ENDIAN=0)

INSTALL(TARGETS ${PROJECT_NAME}
  LIBRARY DESTINATION lib)
